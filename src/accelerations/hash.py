import math
import pickle
import struct
from typing import Any, Dict, Iterable, Union
import warnings

import numba
from numba import cuda
import numpy as np

from accelerations.tiler import tiler_hashing
from accelerations.bytes_operations import  bytes_operations, \
                                            bytes_XOR, \
                                            bytes_ROR, \
                                            bytes_SHR, \
                                            array_binary_repr, \
                                            bytes_to_np, \
                                            pad_array_with_zeros, \
                                            cast_int_sequentially

"""
SHA-256 hashing using parallelisations
https://qvault.io/cryptography/how-sha-2-works-step-by-step-sha-256/

This is mostly written for academic purposes, and
also to test how SHA-256 can be customised by randomising the
initial hash constants and round constants.

In terms of performance it will never match SSE4/AVX1/AVX2 etc.
"""

root2_constants = np.array(
    [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19, 0xcbbb9d5d, 0x629a292a, 0x9159015a, 0x152fecd8, 0x67332667, 0x8eb44a87, 0xdb0c2e0d, 0x47b5481d, 0xae5f9156, 0xcf6c85d3, 0x2f73477d, 0x6d1826ca, 0x8b43d457, 0xe360b596, 0x1c456002, 0x6f196331, 0xd94ebeb1, 0xcc4a611, 0x261dc1f2, 0x5815a7be, 0x70b7ed67, 0xa1513c69, 0x44f93635, 0x720dcdfd, 0xb467369e, 0xca320b75, 0x34e0d42e, 0x49c7d9bd, 0x87abb9f2, 0xc463a2fc, 0xec3fc3f3, 0x27277f6d, 0x610bebf2, 0x7420b49e, 0xd1fd8a33, 0xe4773594, 0x92197f6, 0x1b530c95, 0x869d6342, 0xeee52e4f, 0x11076689, 0x21fba37b, 0x43ab9fb6, 0x75a9f91d, 0x86305019, 0xd7cd8173, 0x7fe00ff, 0x379f513f, 0x66b651a8, 0x764ab842, 0xa4b06be1, 0xc3578c15, 0xd2962a53, 0x1e039f40, 0x857b7bee, 0xa29bf2de, 0xb11a32e8, 0xcdf34e80, 0x31830426, 0x5b89092b, 0xa0c06a13, 0xae79842f, 0xc9cda689, 0xf281f239, 0x28412592, 0x502e64db, 0x77c9c211, 0x9204cd9d, 0xb91bf663, 0xecc38c9d, 0x6656095, 0x39479381, 0x78307697, 0x84ae4b7c, 0xc2b2b755, 0xcf03d20e, 0xf3cbb117, 0xc2d3b4b, 0x308af161, 0x60a7a998, 0x788d9812, 0x84769b42, 0x9c34f062, 0xe2d564c4, 0x116d75fd, 0x2894c107, 0x569b58c6, 0x6d7b3939, 0x8f9f8dbb, 0xd34f03cd, 0xde8372ef, 0x42687a39, 0x63560208, 0x99d12353, 0xba455f46, 0xda8d73ab, 0xe5467430, 0x554bdc2, 0x3a63a3ba, 0x5a01e395, 0x79774abe, 0x83eac9f5, 0xa32aadfc, 0xc2432101, 0xd6e87816, 0xe134b6e8, 0x1ea58922, 0x5166fe45, 0x5b817e5f, 0x6faa746e, 0x8dca1357, 0xabc6592e, 0xb5bd559e, 0xf136df6e, 0x4ebd789, 0x225f6ed3, 0x4970e489, 0x79f5a6b4, 0xa0869aea, 0xd06dcbcd, 0xf68312db, 0x12efe0a8, 0x2f3ef5ac, 0x420e03a7, 0x67856563, 0x837d7386, 0x9613114d, 0xbb18efb1, 0xcd89620f, 0xdb38144, 0x3b2f2a2d, 0x71638d8a, 0x7a6240ef, 0xa73166e5, 0xb01f3b9c, 0xc1f293d7, 0xcad81c82, 0xf72acaf3, 0x34c7257a, 0x4649b7a0, 0x4f07146f, 0x607a0130, 0x9d3b47a9, 0xae803b4b, 0xb71ef1a2, 0xc854e23f, 0x1dcf0ea7, 0x2eca7195, 0x50a4ad7e, 0x7ac09905, 0x9c46d3a4, 0xacfc33c4, 0xc5fb4171, 0xdee611c6, 0x18bc5330, 0x292ef76b, 0x41cab35c, 0x5a531ec3, 0x7aeb45d3, 0x93474e94, 0xc3c7558e, 0xd3e1961f, 0xebf9bc14, 0xf3fdbf27, 0x1bf3caac, 0x23ebd6a8, 0x3bc82883, 0x6365a0f4, 0x6b4c1d24, 0x92afcc0a, 0x9a8ad2bc, 0xb21093c5, 0xf83d25e0, 0x7c10746, 0xf803cfa, 0x1ef938c9, 0x36212e7c, 0x4d390a3a, 0x6beab24c, 0x82dd7d4a, 0x99c09bf3, 0xed27f45a, 0xf4b2d3dd, 0x1a502bbc, 0x3849e05c, 0x5d9d3da7, 0x73ef0ca3, 0x8a326f61, 0xa7cb5e41, 0xd4019b9f, 0xe2b1e72d, 0xf8aec728, 0xe9ddcb8, 0x15ea8282, 0x2bc75cf6, 0x57587f03, 0x7b7de933, 0xbc31ec63, 0xc35b24a7, 0xd1a949ae, 0xe713d14b, 0xee347da6, 0x38e0bf4, 0x11c2bae0, 0x18daf9a3, 0x270749e1, 0x516b0af9, 0x5876dcae, 0x6d92245b, 0xe448a566, 0xf9141bff, 0xdd3e711, 0x296c45ac, 0x6738aabb, 0x8961d022, 0xb9010c0f, 0xc6913ae6, 0xcd577f24, 0xdae0648a, 0xef24aea8, 0xa199ae9, 0x178ce9b0, 0x1e44c973, 0x326551bc, 0x5a86b292, 0x7bd7e127, 0x827e41c6, 0x8fc7924d, 0x966a8364, 0xa3acfa2a, 0xb7882899, 0xdf2017d2, 0x68fdbb4, 0x20c44952, 0x47f226af, 0x5b7a7534, 0x687a9e02, 0x7bf2d487, 0x95d98d3d, 0xa2c690b4, 0xbc93fa7e, 0xc9746900, 0xf6653f36, 0x3331271, 0x16602445, 0x1cc27607, 0x29840e31, 0x3c9edd45, 0x42fb1e92, 0x5609ddfb, 0x75b92a51, 0xb4cdc658, 0xc7a75490, 0xd4338858, 0xda783044, 0x2565943a, 0x31d53a51, 0x380ba529, 0x570dba46, 0x7c24d538, 0x825020d9, 0xa11ae469, 0xb9acbe0e, 0xcc10a6e3, 0xde6c7bd8, 0xf0c04787, 0x278bdbb2, 0x39bfea97, 0x45de445b, 0x4bec23eb, 0x702d3e1d, 0x8e4be6bb, 0xb254a51f, 0xca499db0, 0xfa0b7e9f, 0x23a9c4e0, 0x35739d8a, 0x414b72e6, 0x47362674, 0x530920fa, 0x58f1689c, 0x766ec394, 0x99b7a987, 0xab516b8a, 0xbce41862, 0xf171f4d1, 0xf744f3b6, 0x25c141a6, 0x2b8d5aca, 0x6b207f78, 0x7c6767bf, 0x936632d3, 0xa49d853b, 0xb0140cdf, 0xb5ce368d, 0xc140570d, 0xd81bd46f, 0xe938d018, 0x5afff02, 0xb5f462e, 0x27c0edef, 0x4f5efaff, 0x6b962562, 0x7c7ba4f0, 0x9e33ddaf, 0xa3d025c3, 0xaf06a4bd, 0xb4a0dc25, 0xd099aa79, 0xf2142782, 0xf7a632d2, 0x241e5784, 0x29aa5905, 0x3a4a5f35, 0x455c671e, 0x4ae46ced, 0x6682a5ec, 0x7c8f032f, 0xae04c17c, 0xefa601b5, 0xfa8d4d1f, 0xae38130, 0x20a2f76e, 0x4c03e3eb, 0x516d35ac, 0x5c3dfe52, 0x71d82a16, 0x9cef1a78, 0xa24f3ae7, 0xad0daa49, 0xc28348df, 0xd2952e0e, 0xe2a1aea7, 0xed51b2bb, 0xd537bc5, 0x12a70ae3, 0x4d176d10, 0x5cfb467c, 0x624610bf, 0x7222f791, 0x7cb35a08, 0x8c879e5d, 0xb162e596, 0xc1260eea, 0xcba55650, 0xd0e42151, 0xe09d21b6, 0xeb15a89c, 0xfac64081, 0x1a1865f8, 0x29b9fd1e, 0x39569d8e, 0x5db0e0ad, 0x680ee599, 0x7797da0d, 0x969b2948, 0xab3d46be, 0xbab13e98, 0xc4fbe41c, 0x7ad7d93, 0x35a5c785, 0x4f1d913f, 0x63742137, 0x6d9c55c1, 0x7cd4cfbd, 0x81e69e20, 0x9118fca2, 0xc8aac46e, 0xe6e0b6e6, 0xebe7f68d, 0x141021d2, 0x28186550, 0x32199693, 0x5011762a, 0x72f1eb0a, 0x8bccf075, 0x90c41b17, 0x9ab10169, 0xae85161f, 0xbd5f290a, 0xcc34f9cb, 0xd6167e74, 0xdb068c0a, 0xe4e53e63, 0xf3afc5dc, 0x761effe, 0x113839ce, 0x1622ac5c, 0x24df3c32, 0x3d6599a8, 0x424be461, 0x5ac47944, 0x6e4fea66, 0x7812e80c, 0x9a2f1bc9, 0xb27ee0c6, 0xcf9ca0cf, 0xd4755c17, 0xe2fce3bb, 0xecaa5c32, 0xf1806e9b, 0x18212614, 0x39d6c79c, 0x43747856, 0x51ddc104, 0x650ebfa8, 0x736ef905, 0x7d024f15, 0xa8042cba, 0xbb166615, 0xd2e3ad1b, 0xe1269879, 0xef65be78, 0x25ec346, 0x1a0cae09, 0x366953e6, 0x576d5ff1, 0x60d89043, 0x6ef64a79, 0x7d105c7c, 0x81c2e845, 0xc35c3e70, 0xc808c319, 0xdf6161a7, 0xf20788e5, 0xfb583d45, 0x1be64e38, 0x252feff5, 0x37be83b0, 0x5388b5ae, 0x616893f9, 0x7d1de837, 0x86574704, 0x942a7666, 0xc226fd66, 0xd9170dc0, 0xddac561a, 0x24918a1, 0x3d94ff36, 0x46aed21f, 0x4b3b2e54, 0x667da3bf, 0x7419eed4, 0x7d2af927, 0x98556124, 0xa5e5b284, 0xb7f668a7, 0xc0fc9bb0, 0xd304b51e, 0x47d93d7, 0x8facd2b, 0x11f430a3, 0x16705af0, 0x3151f5f1, 0x6fda1d7a, 0x744ef353, 0x81ab626b, 0x8f04b788, 0x9c5af4d1, 0xa53d66d4, 0xb28e812a, 0xb6fe307a, 0xd1952675, 0xda6f6be4, 0xf4f61f3a, 0xf960b9b4, 0xf70b414, 0x13d94b16, 0x3711fe5f, 0x3b779552, 0x5e986089, 0x6bbf3aac, 0x9780bfb2, 0xba6a7df8, 0xcbd796e7, 0xd48c33d6, 0xd8e606ac, 0xe198b56e, 0xe5f1917f, 0x15adea51, 0x27002075, 0x40f1f344, 0x4de69b0a, 0x6378157b, 0x67c7709c, 0x706536d8, 0x7d4f892e, 0x819d0528, 0x8e839b9f, 0xa3fdb83c, 0xa8486a09, 0xc2021bc7, 0xd769bd39, 0xdbb0bf2d, 0xf10f34dc, 0xeed13a7, 0x1bb555dc, 0x243954f5, 0x30fd1153, 0x41fdd7b4, 0x4ebb4721, 0x5b760624, 0x7d5aeada, 0x96ba24fa, 0x9af3a64c, 0xa365c6e6, 0xc0ebf9fe, 0xcd8ed0fa, 0xd5f9eb06, 0xe6cca16b, 0xfbcd7eb4, 0xc95c8a2, 0x1928f9a5, 0x25b994a0, 0x53b5c68f, 0x603a650a, 0x646608a9, 0x793bfc4e, 0x965bacfc, 0x9eab583b, 0xab20bf71, 0xd071e426, 0xd495f61a, 0xe9462852, 0x6313d39, 0xe71ee1f, 0x1291dd3d, 0x272d6dae, 0x43fbc295, 0x4c3443f9, 0x5ca2067d, 0x81893276, 0x89b99c83, 0x96003943, 0x9a1739e7, 0xa2446e15, 0xae863c62, 0xb29ba380, 0xcb167a83, 0xd33d4e36, 0xfbef9d6d, 0x289577c5, 0x40e2a661, 0x44ee9b2b, 0x4d05be0f, 0x59268270, 0x6544f4db, 0x694e973c, 0x7569f3c5, 0xa1ba91e0, 0xa5c05e65, 0xb1d03db9, 0xd1ef6c13, 0xddf6f330, 0xf5ff37e0, 0xf9ffb7f9, 0x5ffb806, 0x1df8fb49, 0x3de214f4, 0x41de1aeb, 0x49d56930, 0x55c68523, 0x719b2b4b, 0x798c939e, 0x7d84e9dd, 0xa134f8a8, 0xd0abd0b3, 0xe4686bab, 0xf03d1abe, 0xf42e2fd8, 0x7e003e7, 0xbcfaa54, 0x1f7a58e4, 0x23689231, 0x370c2304, 0x42d1d6e6, 0x46bdef6a, 0x5a56e20e, 0x5e41914b, 0x71d3795a, 0x7d8e9c66, 0x8d2f871c, 0xc7a9e544, 0xdb1c7a9b, 0xdeff81b1, 0xf26b356e, 0x1f074d3, 0xd91ffb3, 0x20f0060a, 0x43be3425, 0x4f543436, 0x667a23c4, 0x7d980441, 0x81718c59, 0xa40d533f, 0xaf9297c3, 0xb73faa80, 0xc2c19ef9, 0xce4197fd, 0xf0b5a882, 0xf488922f, 0x7a3dce7, 0x225a8938, 0x2dca24e4, 0x3568cd41, 0x3937ce85, 0x40d52b68, 0x6e7349f9, 0x723f12a7, 0x89014bad, 0x945f8868, 0xb2a6d527, 0xc1c56898, 0xcd1a20c0, 0xd86cf474, 0xfa5a1e4e, 0x187412e1, 0x1c3661fe, 0x23ba60f4, 0x2efed1c1, 0x32bfe2ca, 0x3e01d8ab, 0x4941f36d, 0x5bfe02b1, 0x67392eef, 0x7daa0103, 0x94137b3c, 0xb5a3fd8c, 0xb95db3a5, 0xc4899ff2, 0xcbfb3b7a, 0xed7084a7, 0xfc4a1a66, 0x28c3b9f9, 0x302a8d03, 0x33ddaa89, 0x3b434dbe, 0x465a476d, 0x4a0c35af, 0x6033a935, 0x679492c0, 0x81619908, 0xb88b1229, 0xcae48a46, 0xd5e4b516, 0xebdfd987, 0x57c20c2, 0x10731885, 0x22b590f2, 0x3898a9ca, 0x3c3dd982, 0x4387a7b3, 0x4e74f255, 0x5d040772, 0x67ed5d81, 0x7a192be2, 0x7dbaf876, 0x84fe01f4, 0x9e62c1bb, 0xa941ff9f, 0xb41f9189, 0xbb5d056e, 0xc637cfc2, 0xc9d5b483, 0xdbe86766, 0xdf8530cc, 0xfc64ddbd, 0x1204ecb8, 0x206bfa47, 0x40c933e3, 0x47f85e45, 0x52bdc27f, 0x6843ab2d, 0x6bd95b31, 0x7699570a, 0x8157b52a, 0x8c147649, 0xbe1abc0a, 0xc8ce667d, 0xe1c0c1fc, 0xe8dfd77a, 0xf71be53e, 0x8e301d2, 0x1718bd69, 0x2c6417e4, 0x4c495d14, 0x535df539, 0x56e7fec4, 0x5dfb8ceb, 0x88626258, 0x9d8c842c, 0xa81f453b, 0xaba52e11, 0xc7ce510d, 0xd25aef6f, 0xdce606d1, 0xf579fb30, 0x7032b88, 0x1f88f82e, 0x26891dd1, 0x5af4ec7d, 0x656c6475, 0x6fe25e88, 0x7a56db5a, 0x884531cf, 0x92b6377f, 0x99ab689e, 0x9d25c20b, 0xb2006836, 0xbc6b8517, 0xc35cc70f, 0xc6d52955, 0xd13d558f, 0xf75970b8, 0x1baca64, 0x5304023, 0xc1aaf8b, 0x2b31a9fe, 0x2ea530cf, 0x358bc32b, 0x4a3ba1ae, 0x4dadb76a, 0x58030355, 0x5ee5bf17, 0x8b9802b8, 0x95e4bab7, 0xa03006cc, 0xa70c1a4e, 0xb4c25d92, 0xc5e2a86e, 0xfc961be6, 0x17e0e461, 0x1b498aee, 0x25829110, 0x2c527a1a, 0x2fba335f, 0x36892f82, 0x39f0726b, 0x4af2723e, 0x62bb9950, 0x6ceaf084, 0x73b4671f, 0x81457fcd, 0x923771da, 0x9c6063a4, 0xbe345c8f, 0xc4f68b2e, 0xc85768a1, 0xd27919c3, 0x50d4e47, 0xbc930ff, 0x193f2ccc, 0x2a0f4f1c, 0x34240246, 0x3e376038, 0x4ba47645, 0x55b4ba15, 0x69d147d7, 0x70844a12, 0x7a8fb3bc, 0x7de88beb, 0x87f233a2, 0x8ea292ee, 0x98aa097f, 0x9c0190fe, 0xacb50725, 0xb00baf0b, 0xcabbb49d, 0xd4bb52e1, 0xf60600c7, 0xfcaccfb3, 0x109dcaa1, 0x27db1677, 0x5640baec, 0x602e51d5, 0x813d198b, 0x87d7f6e1, 0xa589e6f9, 0xb2b8e5fd, 0xbc9aada2, 0xc3308020, 0xcd103052, 0xe41542b2, 0xedf0c7f8, 0xf7cb0e31, 0x83414d8, 0xb7bdf60, 0x1be0c2fb, 0x2f887db2, 0x3ca03be5, 0x4cfad582, 0x503fbe85, 0x60963ff2, 0x6da5cdc3, 0x81390f7f, 0x918561db, 0xb8952fec, 0xbbd5a127, 0xc2561c82, 0xcf557742, 0xd9139360, 0xdf91a5a1, 0xec8c2ff7, 0x9b81c6a, 0x19e84f13, 0x239d3cf7, 0x2d50fa37, 0x308ca058, 0x3a3ec816, 0x4a65127d, 0x5dc1e21e, 0x60fb8f2c, 0x7119f99d, 0x7ac44163, 0x846d5c6a, 0x8e154b21, 0x9af361aa, 0xa498954d, 0xb4a9535b, 0xbe4b6ae1, 0xc1813087, 0xcb21bb1e, 0xd4c11c80, 0xde5f5518, 0xee64765b, 0xfb330e53, 0x21928e38, 0x2b278f7f, 0x4e40215f, 0x51702624, 0x6e1aa1c3, 0x747804d2, 0x81314878, 0x911609a5, 0xc0b1885a, 0xcd5ecb45, 0xe9dd5edc, 0xf0310677, 0xf35aaacc, 0x3290657, 0xca35c17, 0xfcbe44d, 0x1944c000, 0x1f94b52b, 0x3bf67287, 0x48907be7, 0x5b73e10b, 0x77c0c2ba, 0x90e06982, 0x9a4a498b, 0x9d6d5673, 0xb03d1c4f, 0xb9a35f8d, 0xc94b6914, 0xcc6ca886, 0xdc111a3b, 0xdf31a1f6, 0xe89281c8, 0xf8319463, 0xe0b48ff, 0x14486b17, 0x39ad46d6, 0x3cca3f55, 0x55adc677, 0x58c9aff3, 0x68537cf8, 0x6b6eb262, 0x7af4fc39, 0x99f8cf10, 0xa02b6064, 0xa3447c6f, 0xa9765b58, 0xb5d8b4d5, 0xce97d964, 0xd7dd9f36, 0xe1225b74, 0xe43909e9, 0xf6beb681, 0xf6a8528, 0x1bbdad67, 0x21e6921c, 0x2b230e32, 0x59422050, 0x5c545b63, 0x6badd090, 0x6ebf5e0c, 0x77f3593a, 0x7e157068, 0x8747bb04, 0x90790287, 0x9cb924c1, 0xa5e81102, 0xac06c9d5, 0xbe604554, 0xc78b8142, 0xd3c39721, 0xe61461ba, 0xec2e6c86, 0x18614d7, 0x13cce788, 0x2304e40e, 0x47800bc5, 0x509c5e51, 0x62d20fff, 0x6beb6fc3, 0x6ef3ad3b, 0x90472466, 0x9c623d24, 0xb798e1a1, 0xc6b376b4, 0xcfc21f3a, 0xe4e09119, 0xeae84cf4, 0xedec01c7, 0xf6f67bfa, 0x605cf66, 0x121026bd, 0x1b16ca11, 0x211aaed9, 0x2a1fba16, 0x572aa5a0, 0x6c279d70, 0x7b224b55, 0x7e20ea49, 0x9016708f, 0x9f0ad525, 0xa20832a2, 0xb9ef5d9d, 0xbcebcb09, 0xd7c6f742, 0xfb88d075, 0x16507433, 0x1f3bd10d, 0x370045c7, 0x51b57692, 0x5a9ab0eb, 0x5d91903f, 0x783ad77d, 0x7e267447, 0x87071d04, 0x89fc76ca, 0x98c5b38c, 0xa498130d, 0xb35cc625, 0xbc37fc9b, 0xc5124baa, 0xd0dea2ea, 0xd6c434a9, 0xdf9bcf27, 0xe28e24ca, 0xf1485180, 0xf43a0dd1, 0x5e2602f, 0xbc45a89, 0x14969350, 0x1d67e76b, 0x20582606, 0x31f78946, 0x37d68a76, 0x4c5ff299, 0x66c0614c, 0x6c9bd702, 0x75644b49, 0x92a4c78d, 0x987d4deb, 0xa42d2f31, 0xacf0126d, 0xb2c6d819, 0xbe733908, 0xc448d472, 0xd8b16736, 0xe16f0e1e, 0xe742571c, 0xfba2cd06, 0xd164cb1, 0x12e6b28a, 0x15cec09f, 0x415c176d, 0x47290bef, 0x69eec917, 0x729e1590, 0x7b4c87cf, 0x8ca6dea2, 0x9dfdcf91, 0xb2344a88, 0xbadc841a, 0xc0a187b8, 0xc383e586, 0xc948592d, 0xe337c01e, 0xebdb341b, 0xfd1f980d, ],
    dtype = np.uint32,
)

root3_constants = np.array(
    [  0x428a2f98,  0x71374491,  0xb5c0fbcf,  0xe9b5dba5,  0x3956c25b,  0x59f111f1,  0x923f82a4,  0xab1c5ed5,  0xd807aa98,  0x12835b01,  0x243185be,  0x550c7dc3,  0x72be5d74,  0x80deb1fe,  0x9bdc06a7,  0xc19bf174,  0xe49b69c1,  0xefbe4786,  0xfc19dc6,  0x240ca1cc,  0x2de92c6f,  0x4a7484aa,  0x5cb0a9dc,  0x76f988da,  0x983e5152,  0xa831c66d,  0xb00327c8,  0xbf597fc7,  0xc6e00bf3,  0xd5a79147,  0x6ca6351,  0x14292967,  0x27b70a85,  0x2e1b2138,  0x4d2c6dfc,  0x53380d13,  0x650a7354,  0x766a0abb,  0x81c2c92e,  0x92722c85,  0xa2bfe8a1,  0xa81a664b,  0xc24b8b70,  0xc76c51a3,  0xd192e819,  0xd6990624,  0xf40e3585,  0x106aa070,  0x19a4c116,  0x1e376c08,  0x2748774c,  0x34b0bcb5,  0x391c0cb3,  0x4ed8aa4a,  0x5b9cca4f,  0x682e6ff3,  0x748f82ee,  0x78a5636f,  0x84c87814,  0x8cc70208,  0x90befffa,  0xa4506ceb,  0xbef9a3f7,  0xc67178f2,  0xca273ece,  0xd186b8c7,  0xeada7dd6,  0xf57d4f7f,  0x6f067aa,  0xa637dc5,  0x113f9804,  0x1b710b35,  0x28db77f5,  0x32caab7b,  0x3c9ebe0a,  0x431d67c4,  0x4cc5d4be,  0x597f299c,  0x5fcb6fab,  0x6c44198c,  0x7ba0ea2d,  0x7eabf2d0,  0x8dbe8d03,  0x90bb1721,  0x99a2ad45,  0x9f86e289,  0xa84c4472,  0xb3df34fc,  0xb99bb8d7,  0xbc76cbab,  0xc226a69a,  0xd304f19a,  0xde1be20a,  0xe39bb437,  0xee84927c,  0xf3edd277,  0xfbfdfe53,  0xbee2c7a,  0xe90181c,  0x25f57204,  0x2da45582,  0x3a52c34c,  0x41dc0172,  0x495796fc,  0x4bd31fc6,  0x533cde21,  0x5f7abfe3,  0x66c206b3,  0x6dfcc6bc,  0x7062f20f,  0x778d5127,  0x7eaba3cc,  0x8363eccc,  0x85be1c25,  0x93c04028,  0x9f4a205f,  0xa1953565,  0xa627bb0f,  0xacfa8089,  0xb3c29b23,  0xb602f6fa,  0xc36cee0a,  0xc7dc81ee,  0xce7b8471,  0xd740288c,  0xe21dba7a,  0xeabbff66,  0xf56a9e60,  0xfde41d72,  0x434d097,  0xa7cb752,  0xea7d22d,  0x16f2987f,  0x1d20cdcd,  0x213af85a,  0x2964505c,  0x2d738e11,  0x3b8cea0e,  0x4584e6ae,  0x515f4356,  0x5356112d,  0x5d1bc3ed,  0x5f0da9f8,  0x62ef0be4,  0x64de896e,  0x6e801ba3,  0x7bdb3595,  0x7fa53778,  0x818916ba,  0x854e959f,  0x926a82c2,  0x9622c7ba,  0x97fdd592,  0x9bb1cb74,  0xae0b5560,  0xb1ae88ab,  0xb8ecc9f6,  0xc1eb8968,  0xc911dd82,  0xcca11fe3,  0xd1f32f1d,  0xd73f80a1,  0xe386413e,  0xe7029b81,  0xec388d87,  0xf1690c47,  0xf84bfdf9,  0xfd6ffbc9,  0x7a83609,  0xb0bacdc,  0x101c99a1,  0x11cbc6df,  0x1a2f419a,  0x1bdb1582,  0x20db4361,  0x2925fcb6,  0x2acce94f,  0x330785f5,  0x34ab416d,  0x39934d5d,  0x482f7803,  0x4b690017,  0x4d050276,  0x503b85d5,  0x55098d4b,  0x59d320e2,  0x602e5f95,  0x64edb71f,  0x69a8bc6c,  0x7adcc952,  0x7c6a5cd5,  0x842760b8,  0x8a500780,  0x91f8c724,  0x968beb53,  0x9b1b1ee1,  0xa1295139,  0xaa31c1c1,  0xad312dfe,  0xb1ad2ad1,  0xb6256803,  0xb7a1fdd7,  0xbc1547a4,  0xc4f0da04,  0xcc476ce9,  0xd963f1af,  0xdad6f06d,  0xddbbc54a,  0xe21022e4,  0xe380d3ba,  0xe7d09ea6,  0xeaae9774,  0xec1d0374,  0xeef8bbe2,  0xf782fa1e,  0xf8ee0f67,  0xfd2d1d96,  0x150001f6,  0x1929b499,  0x1d504a19,  0x22d44374,  0x2f2962aa,  0x35f7a745,  0x3f71089f,  0x42231365,  0x437b9d03,  0x462bb9a8,  0x4a317f07,  0x4f8a14c0,  0x52347b81,  0x53893680,  0x57858831,  0x5f75cf0c,  0x660af244,  0x675b101a,  0x69fa63f9,  0x6b499a59,  0x6de720d9,  0x71d12d87,  0x799d4896,  0x815ed93f,  0x8684c564,  0x8e3512e6,  0x92096662,  0x94958b8b,  0x9865aa9e,  0x9d774608,  0x9ffe6be0,  0xa5096dd4,  0xa78d4c4e,  0xb05255cd,  0xb2d15cf1,  0xb68de988,  0xb7cc3b97,  0xba481559,  0xbdffe42b,  0xbf3ca34f,  0xc2f15143,  0xc91947c5,  0xd5560e3b,  0xd8fcf81a,  0xdb6aff09,  0xdca1a2fd,  0xeb1e1cfe,  0xed84c769,  0xeeb7bfe9,  0xf4b30018,  0xfbd8a30c,  0xfd08bfab,  0x2f5c9c0,  0x7af391e,  0xb37dec4,  0xebe72c3,  0x1242f820,  0x1cc44e2f,  0x2040b6a6,  0x22928a5d,  0x23bb1f2a,  0x2aa9fbc3,  0x306b05a4,  0x374b872f,  0x3bdce92b,  0x44f57f4b,  0x4ce00100,  0x50416558,  0x52814b58,  0x53a0ef8d,  0x55df9add,  0x56fea227,  0x5c96ba99,  0x6346966e,  0x669bd0ff,  0x69ef41e3,  0x73def249,  0x74f899ef,  0x7dbee070,  0x7ed6cbb0,  0x8ad15a98,  0x8e11ba7d,  0x9264f2c3,  0x95a16a13,  0x97c8cd3e,  0x98dc3826,  0x9b028101,  0x9f4ce111,  0xa282c01c,  0xa7d8ebe4,  0xa8e99dbd,  0xae3a6895,  0xb5a4103b,  0xbaea416b,  0xbe124710,  0xc45da5b5,  0xc5699b30,  0xc7810289,  0xc88c748b,  0xcdc320ae,  0xd3ff2698,  0xd50890ee,  0xdd4de242,  0xde55cd42,  0xe16c90f5,  0xe37aebac,  0xe481da19,  0xe9a20f89,  0xedb8e7ba,  0xf6e2e50e,  0x306de77,  0x50aaac2,  0x80f3261,  0xc131143,  0x14136d75,  0x1512c8fb,  0x17110b55,  0x1b0bbede,  0x22f9ee1b,  0x23f707e2,  0x25f0c94c,  0x29e28526,  0x2cd645ac,  0x2fc8b41b,  0x31beed4b,  0x379e1b8a,  0x38982189,  0x434cea93,  0x4635692c,  0x472d4aee,  0x4a1417a0,  0x4c0296c7,  0x4ee7488d,  0x55a2b203,  0x58833952,  0x5a6d8dfb,  0x5b628399,  0x5e40922e,  0x60294280,  0x630545d9,  0x68b9a542,  0x6b9203e7,  0x6e692e37,  0x75053e58,  0x76e77fd8,  0x79b9e578,  0x7f5b27c7,  0x83196442,  0x85e6b5d1,  0x87c4473b,  0x93d801ac,  0x9c27e9a1,  0xa0c1b56b,  0xa46db6bb,  0xa642f9dd,  0xa901f296,  0xa9ec06bc,  0xaca98777,  0xb6ac5b79,  0xbc1c1fed,  0xbd03aafc,  0xc43bbdbd,  0xc7d4f204,  0xc9a0d7f5,  0xcf01bca5,  0xd542d5ce,  0xd9b70609,  0xda9ab7c2,  0xdc61c394,  0xdfee7dba,  0xe296d8ae,  0xe53e2f93,  0xe702842e,  0xe7e48363,  0xe9a82bcd,  0xec4cd1f1,  0xefd175e9,  0xf1931d94,  0xf273c6f4,  0xf51519ab,  0xf9751b8d,  0xfa54c7d8,  0xfeb182be,  0x22cf0d6,  0x3ea01e1,  0x9fc5a96,  0xe4f64eb,  0x137c5714,  0x1458cb76,  0x16ed8703,  0x18a57db4,  0x198150d7,  0x205c2924,  0x26563612,  0x280a713e,  0x2a98055a,  0x2dfe07b5,  0x30897832,  0x323b4184,  0x39d64ea0,  0x3d350f03,  0x41694277,  0x43edcabb,  0x46716fce,  0x49ca412b,  0x4df713a2,  0x52f67467,  0x58c6ab25,  0x5a6f021f,  0x5ceacd0d,  0x5f65bc67,  0x603930da,  0x6bbfa533,  0x6c91b029,  0x70aa813b,  0x73efe32c,  0x75920626,  0x7b469aaa,  0x7ce7168c,  0x8026f627,  0x85040c39,  0x87715eef,  0x8c49971a,  0x8de647d0,  0x9050a5ac,  0x98581abd,  0x9c588753,  0x9d25268d,  0xa386fce7,  0xadda2a63,  0xaf6f856f,  0xb03a1231,  0xb4f7957d,  0xb7553237,  0xb8e883f5,  0xbda0746c,  0xbffb4b14,  0xc31de902,  0xc4aeb840,  0xc7cf582b,  0xd0624402,  0xd1294ff7,  0xd2b72941,  0xd37df6a1,  0xd8251276,  0xe2f50a93,  0xe3ba2734,  0xe60902ea,  0xe85727c8,  0xeaa49659,  0xec2d25b9,  0xee7965b0,  0xef3d52cc,  0xf3d33c9d,  0xf559eab8,  0xf9ec17bf,  0xfaaed9da,  0xfe7b7c28,  0xff3dc7e8,  0x54d63d8,  0x60eff5e,  0xc191fba,  0xe5bac5b,  0x15df49ba,  0x1bdcceba,  0x1ed9ca0b,  0x2057d66b,  0x2116c059,  0x22945bc9,  0x23530d55,  0x2b7fdc1c,  0x2e76b358,  0x32e6cbc5,  0x351ddf85,  0x38cd91f8,  0x398a1872,  0x3b02eeb8,  0x3d37a7b2,  0x3df3c10b,  0x4027a061,  0x43d2009e,  0x448d776c,  0x48f0c756,  0x4c96f38a,  0x4d5193bd,  0x50f5aa6d,  0x560bb056,  0x5838aadb,  0x59aba4dd,  0x5bd798ac,  0x5ebbe989,  0x60e66f93,  0x63105993,  0x68d27ca1,  0x6d214591,  0x6dd8d5e2,  0x6f47c35e,  0x7449eb17,  0x766e6bc4,  0x77dbc280,  0x7ab5a5ff,  0x7e4488ea,  0x811c11aa,  0x833d0965,  0x855d6bb7,  0x8d248708,  0x8f42355b,  0x8ff6a413,  0x937bd8e3,  0x9866de77,  0x99ce0536,  0x9be84656,  0xa233a618,  0xa2e660b4,  0xa66316b5,  0xab424780,  0xaca61046,  0xad57dd03,  0xb0cff0bf,  0xb5a8ad5e,  0xb70a9fec,  0xb9cdca6e,  0xc0016041,  0xc161829e,  0xc37142fc,  0xc4210f1d,  0xc5807975,  0xc78f2662,  0xc83e96da,  0xcc59fa46,  0xcdb7f761,  0xd48a5f40,  0xdc04a6eb,  0xe015d6e6,  0xe0c32b10,  0xe21da711,  0xe424f275,  0xe62bb968,  0xe6d88904,  0xe8de9fe3,  0xf045e4fe,  0xf0f1d9dd,  0xf2f5619a,  0xf851a5f1,  0xfa53525e,  0xfe5528db,  0xfeffeffe,  0xfff001,  0x4fe70cf,  0xa4eb009,  0xaf8789e,  0xc4bdfb2,  0xe489142,  0x12e99c3e,  0x143bb46a,  0x14e4abae,  0x1ad2ee7a,  0x22b48273,  0x25fae638,  0x27f14bd3,  0x2898a7ea,  0x2bdca982,  0x2c83b488,  0x2fc621bf,  0x306cdc16,  0x33adb6d4,  0x35a0cce4,  0x36470eea,  0x3985917b,  0x3a2b83c3,  0x3d68788e,  0x3f5939b9,  0x41eed841,  0x4b98a0e6,  0x4eceae77,  0x4f72f0c0,  0x52a77a94,  0x5537011e,  0x57221f43,  0x5a53a6f1,  0x60101228,  0x61f8a6e6,  0x65c87b72,  0x69968b20,  0x6a38b72f,  0x6fea11c5,  0x71cefa93,  0x7312026c,  0x74f6315a,  0x76d9f117,  0x7c8297a3,  0x7d23505b,  0x80463496,  0x84a8412e,  0x86886beb,  0x87c84be5,  0x886829c2,  0x89a7c144,  0x91215c23,  0x91c085d3,  0x957a8581,  0x9756e4bb,  0x9c4b2ead,  0x9ec43853,  0xa09e840e,  0xa278662e,  0xa8039536,  0xacedfd25,  0xad8b1601,  0xaec5250f,  0xb09be51a,  0xb138b8be,  0xb30eeea5,  0xb4e4bd33,  0xb7f2db10,  0xb9c7971b,  0xbd6fdbcb,  0xc1168812,  0xc68d9084,  0xc728cb00,  0xc8fa3730,  0xca304756,  0xcfa167a0,  0xd20b714d,  0xd9456909,  0xda7922de,  0xdb12ef54,  0xdc466760,  0xde13495f,  0xdeacd42f,  0xe245301b,  0xe377a261,  0xe7a6dccf,  0xf09766f1,  0xf39027de,  0xf5581bb5,  0xf8e6e481,  0xfd0b97b9,  0xfed18f73,  0x1c55a11,  0x54ef362,  0x5e5bdb1,  0x7133304,  0x8d714e2,  0xb3105d8,  0xcf40daa,  0xfe2f67d,  0x10790616,  0x11a5065d,  0x15bdc37b,  0x177e9f4b,  0x193f1f16,  0x1a69ebec,  0x1c29d2c2,  0x1cbf0b5b,  0x1fa88e08,  0x203d89c1,  0x24e3fba9,  0x285f29ff,  0x2ab08037,  0x2fe539ac,  0x310cf556,  0x32c8445d,  0x363dd6fd,  0x36d14cd6,  0x388b7335,  0x3a4540f4,  0x3bfeb641,  0x44064d41,  0x45bdd09a,  0x49be052f,  0x4ae24f7c,  0x4d2a7069,  0x5003c12b,  0x524a8857,  0x55b3944c,  0x5acea38a,  0x5bf0b059,  0x5c81a88f,  0x5da37c9e,  0x646b5d7b,  0x67cd533b,  0x697dcfff,  0x6a0de6f1,  0x6e8d4fc4,  0x703c7e0a,  0x71eb5916,  0x75d76abd,  0x78a3881b,  0x7c8c9704,  0x7daa4919,  0x86047a5a,  0x87af2983,  0x89598799,  0x8b0394c1,  0x8d3b28ab,  0x8ee47994,  0x8fffd829,  0x908d7a0f,  0x93de8a53,  0x95869a68,  0x96a1236e,  0x972e5aa6,  0x98d5cb33,  0x9ee3c071,  0xa089bf06,  0xa11657af,  0xa22f6ebd,  0xa71ea61a,  0xa7aad605,  0xa8c31bc7,  0xac0b1ccd,  0xac96fea8,  0xae3a705e,  0xaf51e657,  0xb6671e77,  0xb808c02c,  0xb9aa1508,  0xbac022fb,  0xbcebd8c3,  0xbfa1bcf0,  0xc848a546,  0xcc98f2fb,  0xcd22d714,  0xcec05156,  0xcfd3ce86,  0xd05d80a4,  0xd170cbef,  0xd1fa6520,  0xd4a9e6b2,  0xd86b0d83,  0xda067de1,  0xdb189fa7,  0xdd3c80a5,  0xdfe8a17d,  0xe182b97c,  0xe6d7a289,  0xe7e83c75,  0xe8707d43,  0xea090f1e,  0xf1ffa7af,  0xf30eef31,  0xf52d1e32,  0xf7d2254e,  0xf967fd2e,  0xfafd8d84,  0xfd19dee3,  0xfeaec8c5,  0x1d7c743,  0x2e5325d,  0x4791806,  0x4ffaa32,  0x69331a2,  0x7a00f67,  0x933215c,  0x9b96d0c,  0xc58726b,  0xcde8f50,  0x110e5ea7,  0x129fcc72,  0x17d7eefc,  0x18e2cca8,  0x1c02ad6f,  0x1fa68206,  0x26e9cb86,  0x28777557,  0x2da3164d,  0x2eab75cf,  0x334fb096,  0x355f0862,  0x36ea3bfb,  0x37f18e84,  0x397c529a,  0x3d146e08,  0x3e9e5401,  0x4027f796,  0x42b774f8,  0x433a77ff,  0x45c91917,  0x48d9b5a8,  0x4ae436b6,  0x4d70b43b,  0x4df31def,  0x507ec1ac,  0x52878f2a,  0x5593ead1,  0x581d7132,  0x5e3171f4,  0x5eb2ee3a,  0x5fb5d164,  0x61bb424c,  0x633f0c59,  0x64416f91,  0x6645e0ff,  0x6ace42de,  0x6d51f484,  0x6ed3d7a4,  0x70557bb2,  0x70d5f9b7,  0x725749d4,  0x74d8ee6e,  0x77da0165,  0x785a16e8,  0x7ada1a77,  0x7c59c98b,  0x7dd93a71,  0x7f586d42,  0x8156fb4a,  0x82d59da5,  0x8552cdb8,  0x86d0cb9d,  0x87501293,  0x88cdbe80,  0x8a4b2d10,  0x8bc85e5b,  0x8e43289f,  0x903e8395,  0x962e0bed,  0x97a95682,  0x9d160e7d,  0x9d9425a5,  0xa201ca43,  0xa2fd6cd4,  0xa4f46262,  0xa768806a,  0xaec0fdcf,  0xb0b57b22,  0xb51a16ed,  0xb613b8fa,  0xb690803f,  0xb900032f,  0xba75d0bb,  0xbaf25da2,  0xbc67dd88,  0xbd60bd29,  0xc1bf6c75,  0xc3aff6c6,  0xc69805fe,  0xcaf26da3,  0xcecf51f1,  0xd041beea,  0xd0bd2be9,  0xd3a13533,  0xd512e4af,  0xd77a8b48,  0xd7f599bf,  0xda5c83fd,  0xdad76cd7,  0xdc4801dc,  0xdeadd29e,  0xe208245d,  0xe2fd2857,  0xe8b937c5,  0xe9336638,  0xed03fc15,  0xed7df325,  0xefdf6a71,  0xf0593cb7,  0xf2b9fc59,  0xf779b20f,  0xf86c8d65,  0xf8e5f1f4,  0xf9d8a8e1,  0xfbbdce06,  0xff86f622,  0xf201ab,  0x25cd70d,  0x2d5bcd3,  0x5aaa175,  0x96fd86c,  0xb51e4a9,  0xc42c70d,  0xdabee08,  0x14b690bd,  0x152e8e72,  0x17862aa0,  0x17fe0503,  0x196570ed,  0x1a54f0dc,  0x1bbc04cb,  0x1d22e40b,  0x1f011138,  0x206775d4,  0x2156466e,  0x24222ca3,  0x2587d159,  0x27645bd6,  0x2a2e7e15,  0x2b1c5b52,  0x2e5c2c45,  0x31244878,  0x337517c4,  0x39018fe2,  0x3a642de4,  0x3d28d0c6,  0x3e8ad5cc,  0x3f00cc2b,  0x4410ee18,  0x45e79782,  0x4a094cdf,  0x4c5426ef,  0x4db4007e,  0x50e83981,  0x51d260fc,  0x52476c6a,  0x53a66d7a,  0x55ef00ac,  0x57c2464b,  0x592080aa,  0x5a09e169,  0x5b67c952,  0x623a6d6e,  0x6567e2a9,  0x67ac4a3b,  0x68204ead,  0x6ad7f7a9,  0x6d1b1a8c,  0x6d8ede24,  0x712c3926,  0x719fcc57,  0x75af07e2,  0x7b160b89,  0x7f2157be,  0x807a11c5,  0x84106ebd,  0x88180466,  0x896f826d,  0x89e1f74a,  0x8de727a5,  0x8ecba39f,  0x90223680,  0x90945d0d,  0x92cecfcd,  0x9496ce28,  0x96d05788,  0x9825d24d,  0x997b1e99,  0x9b41e6d2,  0x9c252c09,  0x9d79ed4d,  0x9deb78c8,  0xa022e538,  0xa09451ef,  0xa33c72c4,  0xa41eff80,  0xa572ac58,  0xa6c62b55,  0xa7374b7b,  0xa9dda1a3,  0xaabf95c0,  0xadd5cc9a,  0xb1cc5e46,  0xb2ad9c8e,  0xb3ff5445,  0xb863c7e1,  0xb9446fba,  0xbb05837c,  0xbc561dee,  0xbd366bfc,  0xbef6cc64,  0xbfd6dec8,  0xc2e682e5,  0xc436113e,  0xc515acc3,  0xc823b1a3,  0xcac13eef,  0xcba046b9,  0xcc0fc343,  0xd295c3fc,  0xd3741bc2,  0xd8a89208,  0xd9f5427b,  0xdb41c764,  0xddda4ed4,  0xe07228c9,  0xe377cc65,  0xe4c313ba,  0xe59fd604,  0xe60e2ffc,  0xe6ead596,  0xeacad29a,  0xec15268e,  0xeea94e37, ],
    dtype = np.uint32,
)

# Do not njit this one - we just need to run this once at input time
def pad_data_to_512_blocks(
    data:Union[
        bytes,
        Any
    ],
):
    _return = data_to_bytes(data)
    _data_len = len(data)

    _pad_len = 56-(_data_len)%64
    _pad_len += 64 * (_pad_len <= 0)


    _return += (128).to_bytes(
        _pad_len,
        "little",
    )

    _return += (_data_len<<3).to_bytes(8, "big")

    assert len(_return) % 64 == 0

    return _return
    
def data_to_bytes(
    data:Union[
        bytes,
        Any
    ]
):
    """
    TODO This function needs expanding to convert more types
    """
    _type_switch = {
        str:lambda obj: obj.encode("utf-8"),
        bytes: lambda obj: obj,
        int: lambda obj: obj.to_bytes(math.ceil(math.log2(obj)/8), "big"),
        float: lambda obj: struct.pack('>f', obj),
        None: lambda obj: pickle.dumps(obj),
    }

    for _type in _type_switch:
        if (_type is not None):
            if (isinstance(data, _type)):
                return _type_switch[_type](data)
    
    return _type_switch[None](data)

# TODO How to parallelise this?
def sha256_chunk_loop(
    chunk:np.ndarray,    # must be 64 bytes long
    initial_hashes:np.ndarray = root2_constants[np.arange(8)],
    round_constants:np.ndarray = root3_constants[np.arange(64)],
):
    """
    Chunk Loop of a SHA-2 algorithm
    """
    
    final_hashes = initial_hashes

    _message_schedule = sha256_message_schedule(chunk)


    # Create Chunk
    for _i in range(16, 64):
        _s0 =       bytes_ROR.process_cpu(
                        _message_schedule[_i-15],
                        amount = 7,
                    ) ^ \
                    bytes_ROR.process_cpu(
                        _message_schedule[_i-15],
                        amount = 18,
                    ) ^ \
                    bytes_SHR.process_cpu(
                        _message_schedule[_i-15],
                        amount = 3,
                    )
        
        _s1 =       bytes_ROR.process_cpu(
                        _message_schedule[_i-2],
                        amount = 17,
                    ) ^ \
                    bytes_ROR.process_cpu(
                        _message_schedule[_i-2],
                        amount = 19,
                    ) ^ \
                    bytes_SHR.process_cpu(
                        _message_schedule[_i-2],
                        amount = 10,
                    )
            
        _message_schedule[_i]   =   (_message_schedule[_i-16] + \
                                    _s0 + \
                                    _message_schedule[_i-7] + \
                                    _s1)

    _chunk_cache = final_hashes.copy()

    # Compression
    for _i in range(64):
        # print ("E  ", np.binary_repr(_hash[4], width=32))

        _s1 =       bytes_ROR.process_cpu(
                        _chunk_cache[4],
                        amount = 6,
                    ) ^ \
                    bytes_ROR.process_cpu(
                        _chunk_cache[4],
                        amount = 11,
                    ) ^ \
                    bytes_ROR.process_cpu(
                        _chunk_cache[4],
                        amount = 25,
                    )

        # print ("S1 ", np.binary_repr(_s1, width=32))

        _ch =       (_chunk_cache[4] & _chunk_cache[5]) ^ \
                    ((~_chunk_cache[4]) & _chunk_cache[6])

        # print ("CH ", np.binary_repr(_ch, width=32))

        # print ("H  ", np.binary_repr(_hash[7], width=32))
        # print ("k/i", np.binary_repr(round_constants[_i], width=32))
        # print ("w/i", np.binary_repr(_message_schedule[_i], width=32))
        
        _temp1 =    _chunk_cache[7] + \
                    _s1 + \
                    _ch + \
                    round_constants[_i] + \
                    _message_schedule[_i]

        # print ("T1 ", np.binary_repr(_temp1, width=32))

        _s0 =       bytes_ROR.process_cpu(
                        _chunk_cache[0],
                        amount = 2,
                    ) ^ \
                    bytes_ROR.process_cpu(
                        _chunk_cache[0],
                        amount = 13,
                    ) ^ \
                    bytes_ROR.process_cpu(
                        _chunk_cache[0],
                        amount = 22,
                    )

        # print ("S0 ", np.binary_repr(_s0, width=32))

        _maj =      (_chunk_cache[0] & _chunk_cache[1]) ^ \
                    (_chunk_cache[0] & _chunk_cache[2]) ^ \
                    (_chunk_cache[1] & _chunk_cache[2])

        # print ("MAJ", np.binary_repr(_maj, width=32))

        _temp2 =    _s0 + _maj

        # print ("T2 ", np.binary_repr(_temp2, width=32))

        _chunk_cache[7] =  _chunk_cache[6]
        _chunk_cache[6] =  _chunk_cache[5]
        _chunk_cache[5] =  _chunk_cache[4]
        _chunk_cache[4] =  _chunk_cache[3] + _temp1
        _chunk_cache[3] =  _chunk_cache[2]
        _chunk_cache[2] =  _chunk_cache[1]
        _chunk_cache[1] =  _chunk_cache[0]
        _chunk_cache[0] =  _temp1 + _temp2

        # End of Compression

    final_hashes += _chunk_cache

    return final_hashes

def sha256_message_schedule(
    chunk:np.ndarray,
):
    """
    Prepare message schedule.

    Each input data chunks consists of 64 x uint8 = 512 bits.
    Chunk processing requires 64 x uint32 = 2048 bits.
    
    We need to pad input data chunks with zeros to get the full 2048 bits.
    """

    output = cast_int_sequentially(chunk, dtype=np.uint32)
    output = pad_array_with_zeros(output, length=64)

    return output


def sha256(
    data:Union[bytes, Any],
    initial_hashes:np.ndarray = root2_constants[np.arange(8)],
    round_constants:np.ndarray = root3_constants[np.arange(64)],
):
    """
    Generate a SHA-256 hashing
    """
    _bytes = bytes_to_np(
                pad_data_to_512_blocks(
                    data_to_bytes(data)
                )
             ).reshape((-1, 64))

    _hashes     = initial_hashes.copy()
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=RuntimeWarning)
        for _chunk_id in range(_bytes.shape[0]):
            _hashes = sha256_chunk_loop(
                chunk = _bytes[_chunk_id],
                initial_hashes = _hashes,
                round_constants = round_constants,
            )

    return sum( [ int(_hash) << ((7-_pos)*32) \
            for _pos, _hash in enumerate(_hashes) ]
    )
        

if __name__=="__main__":
    # initial_hashes = np.random.choice(
    #     root2_constants,
    #     size=8,
    #     replace=False)
    # round_constants = np.random.choice(
    #     root3_constants,
    #     size=64,
    #     replace=False)

    _text = "hello world"*1000
    _hash = sha256(
        _text,
        # initial_hashes  =   initial_hashes,
        # round_constants =   round_constants,
    )

    print (hex(_hash))
    import hashlib
    print(hashlib.sha256(_text.encode("utf-8")).hexdigest())

    # print (" ".join(
    #                 (
    #                     f"{_byte:08b}" for _byte in _padded
    #                 )
    #                 )
    # )